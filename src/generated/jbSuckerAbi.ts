export const jbSuckerAbi = [
  {
    inputs: [
      { internalType: "contract JBArbitrumSuckerDeployer", name: "deployer", type: "address" },
      { internalType: "contract IJBDirectory", name: "directory", type: "address" },
      { internalType: "contract IJBPermissions", name: "permissions", type: "address" },
      { internalType: "contract IJBTokens", name: "tokens", type: "address" },
      { internalType: "enum JBAddToBalanceMode", name: "addToBalanceMode", type: "uint8" },
      { internalType: "address", name: "trusted_forwarder", type: "address" },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  { inputs: [], name: "InvalidInitialization", type: "error" },
  {
    inputs: [{ internalType: "uint256", name: "chainId", type: "uint256" }],
    name: "JBArbitrumSucker_ChainNotSupported",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint256", name: "payment", type: "uint256" },
      { internalType: "uint256", name: "cost", type: "uint256" },
    ],
    name: "JBArbitrumSucker_NotEnoughGas",
    type: "error",
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "address", name: "sender", type: "address" },
      { internalType: "uint256", name: "projectId", type: "uint256" },
      { internalType: "uint256", name: "permissionId", type: "uint256" },
    ],
    name: "JBPermissioned_Unauthorized",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint256", name: "minGas", type: "uint256" },
      { internalType: "uint256", name: "minGasLimit", type: "uint256" },
    ],
    name: "JBSucker_BelowMinGas",
    type: "error",
  },
  { inputs: [], name: "JBSucker_Deprecated", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "givenTime", type: "uint256" },
      { internalType: "uint256", name: "minimumTime", type: "uint256" },
    ],
    name: "JBSucker_DeprecationTimestampTooSoon",
    type: "error",
  },
  { inputs: [], name: "JBSucker_ExpectedMsgValue", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "balance", type: "uint256" },
    ],
    name: "JBSucker_InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint256", name: "received", type: "uint256" },
      { internalType: "uint256", name: "expected", type: "uint256" },
    ],
    name: "JBSucker_InsufficientMsgValue",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "remoteToken", type: "address" }],
    name: "JBSucker_InvalidNativeRemoteAddress",
    type: "error",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "root", type: "bytes32" },
      { internalType: "bytes32", name: "inboxRoot", type: "bytes32" },
    ],
    name: "JBSucker_InvalidProof",
    type: "error",
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "uint256", name: "index", type: "uint256" },
    ],
    name: "JBSucker_LeafAlreadyExecuted",
    type: "error",
  },
  {
    inputs: [{ internalType: "enum JBAddToBalanceMode", name: "mode", type: "uint8" }],
    name: "JBSucker_ManualNotAllowed",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint256", name: "projectId", type: "uint256" },
      { internalType: "address", name: "token", type: "address" },
    ],
    name: "JBSucker_NoTerminalForToken",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "caller", type: "address" }],
    name: "JBSucker_NotPeer",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "minimumAmount", type: "uint256" },
    ],
    name: "JBSucker_QueueInsufficientSize",
    type: "error",
  },
  {
    inputs: [
      { internalType: "address", name: "localToken", type: "address" },
      { internalType: "address", name: "mappedTo", type: "address" },
    ],
    name: "JBSucker_TokenAlreadyMapped",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "JBSucker_TokenHasInvalidEmergencyHatchState",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "JBSucker_TokenNotMapped",
    type: "error",
  },
  {
    inputs: [{ internalType: "uint256", name: "value", type: "uint256" }],
    name: "JBSucker_UnexpectedMsgValue",
    type: "error",
  },
  { inputs: [], name: "JBSucker_ZeroBeneficiary", type: "error" },
  { inputs: [], name: "JBSucker_ZeroERC20Token", type: "error" },
  { inputs: [], name: "MerkleLib__insert_treeIsFull", type: "error" },
  { inputs: [], name: "NotInitializing", type: "error" },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "address", name: "beneficiary", type: "address" },
      { indexed: false, internalType: "address", name: "token", type: "address" },
      { indexed: false, internalType: "uint256", name: "projectTokenCount", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "terminalTokenAmount", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "index", type: "uint256" },
      { indexed: false, internalType: "bool", name: "autoAddedToBalance", type: "bool" },
      { indexed: false, internalType: "address", name: "caller", type: "address" },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "uint40", name: "timestamp", type: "uint40" },
      { indexed: false, internalType: "address", name: "caller", type: "address" },
    ],
    name: "DeprecationTimeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "address[]", name: "tokens", type: "address[]" },
      { indexed: false, internalType: "address", name: "caller", type: "address" },
    ],
    name: "EmergencyHatchOpened",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: "uint64", name: "version", type: "uint64" }],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "beneficiary", type: "address" },
      { indexed: true, internalType: "address", name: "token", type: "address" },
      { indexed: false, internalType: "bytes32", name: "hashed", type: "bytes32" },
      { indexed: false, internalType: "uint256", name: "index", type: "uint256" },
      { indexed: false, internalType: "bytes32", name: "root", type: "bytes32" },
      { indexed: false, internalType: "uint256", name: "projectTokenCount", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "terminalTokenAmount", type: "uint256" },
      { indexed: false, internalType: "address", name: "caller", type: "address" },
    ],
    name: "InsertToOutboxTree",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "token", type: "address" },
      { indexed: false, internalType: "uint64", name: "nonce", type: "uint64" },
      { indexed: false, internalType: "bytes32", name: "root", type: "bytes32" },
      { indexed: false, internalType: "address", name: "caller", type: "address" },
    ],
    name: "NewInboxTreeRoot",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "bytes32", name: "root", type: "bytes32" },
      { indexed: true, internalType: "address", name: "token", type: "address" },
      { indexed: false, internalType: "uint256", name: "index", type: "uint256" },
      { indexed: false, internalType: "uint64", name: "nonce", type: "uint64" },
      { indexed: false, internalType: "address", name: "caller", type: "address" },
    ],
    name: "RootToRemote",
    type: "event",
  },
  {
    inputs: [],
    name: "ADD_TO_BALANCE_MODE",
    outputs: [{ internalType: "enum JBAddToBalanceMode", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ARBINBOX",
    outputs: [{ internalType: "contract IInbox", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DEPLOYER",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DIRECTORY",
    outputs: [{ internalType: "contract IJBDirectory", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GATEWAYROUTER",
    outputs: [{ internalType: "contract IArbGatewayRouter", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "LAYER",
    outputs: [{ internalType: "enum JBLayer", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MESSENGER_BASE_GAS_LIMIT",
    outputs: [{ internalType: "uint32", name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MESSENGER_ERC20_MIN_GAS_LIMIT",
    outputs: [{ internalType: "uint32", name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERMISSIONS",
    outputs: [{ internalType: "contract IJBPermissions", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TOKENS",
    outputs: [{ internalType: "contract IJBTokens", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "addOutstandingAmountToBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "amountToAddToBalanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "token", type: "address" },
          {
            components: [
              { internalType: "uint256", name: "index", type: "uint256" },
              { internalType: "address", name: "beneficiary", type: "address" },
              { internalType: "uint256", name: "projectTokenCount", type: "uint256" },
              { internalType: "uint256", name: "terminalTokenAmount", type: "uint256" },
            ],
            internalType: "struct JBLeaf",
            name: "leaf",
            type: "tuple",
          },
          { internalType: "bytes32[32]", name: "proof", type: "bytes32[32]" },
        ],
        internalType: "struct JBClaim",
        name: "claimData",
        type: "tuple",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "token", type: "address" },
          {
            components: [
              { internalType: "uint256", name: "index", type: "uint256" },
              { internalType: "address", name: "beneficiary", type: "address" },
              { internalType: "uint256", name: "projectTokenCount", type: "uint256" },
              { internalType: "uint256", name: "terminalTokenAmount", type: "uint256" },
            ],
            internalType: "struct JBLeaf",
            name: "leaf",
            type: "tuple",
          },
          { internalType: "bytes32[32]", name: "proof", type: "bytes32[32]" },
        ],
        internalType: "struct JBClaim[]",
        name: "claims",
        type: "tuple[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address[]", name: "tokens", type: "address[]" }],
    name: "enableEmergencyHatchFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "token", type: "address" },
          {
            components: [
              { internalType: "uint256", name: "index", type: "uint256" },
              { internalType: "address", name: "beneficiary", type: "address" },
              { internalType: "uint256", name: "projectTokenCount", type: "uint256" },
              { internalType: "uint256", name: "terminalTokenAmount", type: "uint256" },
            ],
            internalType: "struct JBLeaf",
            name: "leaf",
            type: "tuple",
          },
          { internalType: "bytes32[32]", name: "proof", type: "bytes32[32]" },
        ],
        internalType: "struct JBClaim",
        name: "claimData",
        type: "tuple",
      },
    ],
    name: "exitThroughEmergencyHatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "token", type: "address" },
          { internalType: "uint256", name: "amount", type: "uint256" },
          {
            components: [
              { internalType: "uint64", name: "nonce", type: "uint64" },
              { internalType: "bytes32", name: "root", type: "bytes32" },
            ],
            internalType: "struct JBInboxTreeRoot",
            name: "remoteRoot",
            type: "tuple",
          },
        ],
        internalType: "struct JBMessageRoot",
        name: "root",
        type: "tuple",
      },
    ],
    name: "fromRemote",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "inboxOf",
    outputs: [
      {
        components: [
          { internalType: "uint64", name: "nonce", type: "uint64" },
          { internalType: "bytes32", name: "root", type: "bytes32" },
        ],
        internalType: "struct JBInboxTreeRoot",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "__projectId", type: "uint256" }],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "isMapped",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "forwarder", type: "address" }],
    name: "isTrustedForwarder",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "localToken", type: "address" },
          { internalType: "uint32", name: "minGas", type: "uint32" },
          { internalType: "address", name: "remoteToken", type: "address" },
          { internalType: "uint256", name: "minBridgeAmount", type: "uint256" },
        ],
        internalType: "struct JBTokenMapping",
        name: "map",
        type: "tuple",
      },
    ],
    name: "mapToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "localToken", type: "address" },
          { internalType: "uint32", name: "minGas", type: "uint32" },
          { internalType: "address", name: "remoteToken", type: "address" },
          { internalType: "uint256", name: "minBridgeAmount", type: "uint256" },
        ],
        internalType: "struct JBTokenMapping[]",
        name: "maps",
        type: "tuple[]",
      },
    ],
    name: "mapTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "outboxOf",
    outputs: [
      {
        components: [
          { internalType: "uint64", name: "nonce", type: "uint64" },
          { internalType: "uint256", name: "balance", type: "uint256" },
          {
            components: [
              { internalType: "bytes32[32]", name: "branch", type: "bytes32[32]" },
              { internalType: "uint256", name: "count", type: "uint256" },
            ],
            internalType: "struct MerkleLib.Tree",
            name: "tree",
            type: "tuple",
          },
          { internalType: "uint256", name: "numberOfClaimsSent", type: "uint256" },
        ],
        internalType: "struct JBOutboxTree",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "peer",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "peerChainId",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "projectTokenCount", type: "uint256" },
      { internalType: "address", name: "beneficiary", type: "address" },
      { internalType: "uint256", name: "minTokensReclaimed", type: "uint256" },
      { internalType: "address", name: "token", type: "address" },
    ],
    name: "prepare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "projectId",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "remoteTokenFor",
    outputs: [
      {
        components: [
          { internalType: "bool", name: "enabled", type: "bool" },
          { internalType: "bool", name: "emergencyHatch", type: "bool" },
          { internalType: "uint32", name: "minGas", type: "uint32" },
          { internalType: "address", name: "addr", type: "address" },
          { internalType: "uint256", name: "minBridgeAmount", type: "uint256" },
        ],
        internalType: "struct JBRemoteToken",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint40", name: "timestamp", type: "uint40" }],
    name: "setDeprecation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [{ internalType: "enum JBSuckerState", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "toRemote",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedForwarder",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  { stateMutability: "payable", type: "receive" },
] as const;
